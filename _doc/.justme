sudo apt update && sudo apt upgrade -y
zone: $RaffI1#TillY@7.3*

root: b22d4etdc3Ieba_98F0c322ccb03be

# Create Two new users:
adduser dr_buyme
dr_buyme:  98b22d4eTdc3eba980c3fdW22ccb03be

adduser dil_admin default:
dil_admin: 7yb2ed4uiSc3mba5p0c3fd2Lkc9b60eg

# Change the hostname 
hostnamectl set-hostname buyme
$ hostname
buyme

# Add the ip address
sudo nano /etc/hosts
165.22.113.159

# Give a permission to both users:
# To add these privileges to our new user, we need to add the new user to the “sudo” group. 
# By default, on Ubuntu 16.04, users who belong to the “sudo” group are allowed to use the 
# sudo command.
# As root, run this command to add your new user to the sudo group (substitute the highlighted
# word with your new user):

usermod -aG sudo dil_admin
usermod -aG sudo dr_buyme

# Exit from Digitalocean and connect to the terminal from local machine:

ssh dil_admin@165.22.113.159
password required

sudo apt update && sudo apt upgrade -y

$ scp ~/.ssh/id_rsa.pub dil_admin@165.22.113.159:~/.ssh/authorized_keys

il_admin@buyme:~$ mkdir -p ~/.ssh

dil_admin@buyme:~$ ls -la .ssh/
total 12
drwxrwxr-x 2 dil_admin dil_admin 4096 Jul 26 18:47 .
drwxr-xr-x 5 dil_admin dil_admin 4096 Jul 26 18:46 ..
-rw-r--r-- 1 dil_admin dil_admin  740 Jul 26 18:47 authorized_keys
dil_admin@buyme:~$ more .ssh/authorized_keys 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDJEpyAUvw0l7HA22rnUIirpG43XgWnq4WBEXNfQn62lnh0BnxxpKr2DTEHYTKo/nIIHHxbiGTF0m8phJB2BJ6h9gDO1TJmnzxp8WPzNo
ZIaV7vLHCs1sYRrWxMzQ8mlAI8jMr9pm6wzRF6bRmun50k0sdjFecfC+n8tghnr7WXTt4C5JPJX8wK6Vx82KLhw2DJVKA9qK4iFNmu1LPi2WzARgUrI3Y/DYUpUr44CUEeXEvGdAVO5Ums
PysSfPgsZHYjGjWLxrYH+abuakZnYFnC38FFsCNQkqowAuaXg4e4kNAwjS5chHV7cBAQ9F+Y2hNz1Xny98dYaJX4J+NSoc//YR1rSdb9ARK+zfkWxaa/CW3IRK2M+GXn17tHAsjRT3zZJZ
8B/UCDXSv5WuRSHH4Riogz1qZqP/qRN0FxOWqzocc0xIr4fRIKTfV1LQXsPRsnGF3Lsb7sEXy8O5KiRMJdxHNIa+YoG4vzl+ptbX/2KT3xou1j8qzMTjOKfN8ZscNnHFAVD3c9KttzXECi
FiaiCvomUtrrBpmIR/sNGvfABQG1cNJsHgq4nspxPsxh5mq6EjrTU9riGl9DLhjj2v/9CvtgCxhvyKlv9sRURLeDAQzrKjt2AbHRIX6mvoGeed/Uv/4PV9wGLWjYIbnTUF1xOVr+fW68jU
x6M4Do8BvkSQ== raffi@raffi-VB

dil_admin@buyme:~$ sudo chmod 700 ~/.ssh/
[sudo] password for dil_admin: 
dil_admin is not in the sudoers file.  This incident will be reported.
dil_admin@buyme:~$ su -
Password: 

root@buyme:~# visudo
# Add follwing
dr_buyme ALL=(ALL:ALL) ALL 
dil_admin ALL=(ALL:ALL) ALL 

# Now Try again:

dil_admin@buyme:~$ sudo chmod 700 ~/.ssh/
[sudo] password for dil_admin: 

dil_admin@buyme:~$ sudo chmod 600 ~/.ssh/*
dil_admin@buyme:~$ 

# we stop root to login and password authentication:
dil_admin@buyme:~$ sudo nano /etc/ssh/sshd_config 

PermitRootLogin yes Update >> PermitRootLogin no 

# Next thing to change:
PasswordAuthentication yes Update to PasswordAuthentication no

# Exit and save than run this:
sudo systemctl reload sshd.service

OR RUN: dil_admin@buyme:~$ sudo systemctl restart sshd

# Different applications can register their profiles with UFW upon installation. 
# These profiles allow UFW to manage these applications by name. OpenSSH, the service
# allowing us to connect to our server now, has a profile registered with UFW.

dil_admin@buyme:~$ sudo ufw app list
Available applications:
  OpenSSH

# We need to make sure that the firewall allows SSH connections so that we can log back 
# in next time. We can allow these connections by typing:

dil_admin@buyme:~$ sudo ufw allow OpenSSH
Rules updated
Rules updated (v6)

# Afterwards, we can enable the firewall by typing:
dil_admin@buyme:~$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? y
Firewall is active and enabled on system startup

# Type “y” and press ENTER to proceed. You can see that SSH connections are still allowed by typing:

dil_admin@buyme:~$ sudo ufw status
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere                  
OpenSSH (v6)               ALLOW       Anywhere (v6)  

dil_admin@buyme:~$ sudo ufw allow 8000
Rule added
Rule added (v6)

################YOU MAY NEED TO RUN THIS BOTH COMMAND BUT NOT SURE NOW#############
sudo ufw default allow outgoing

sudo ufw default deny incoming

dil_admin@buyme:~$ sudo ufw status
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere                  
8000                       ALLOW       Anywhere                  
OpenSSH (v6)               ALLOW       Anywhere (v6)             
8000 (v6)                  ALLOW       Anywhere (v6)        

################

In local machinage go to cd ecomma

scp -r buyme dil_admin@165.22.113.159:~/ecommarce

sudo -u postgres psql
postgres=# CREATE DATABASE shoppingdb;
CREATE DATABASE

# Create user and password
postgres=# CREATE USER dilshad_admin WITH PASSWORD 'ghs*yg@gyysf<6q6wtqw';


postgres=# ALTER ROLE dilshad_admin SET client_encoding TO 'utf8';
ALTER ROLE
postgres=# ALTER ROLE dilshad_admin SET default_transaction_isolation TO 'read committed';
ALTER ROLE
postgres=# ALTER ROLE dilshad_admin SET timezone TO 'UTC';
ALTER ROLE

Give permission to the user to access db
postgres=# GRANT ALL PRIVILEGES ON DATABASE shoppingdb TO dilshad_admin;
GRANT

# Add IP address in the setting
# create virtualenv and activate
# Install
pip install gunicorn psycopg2-binary

python3 manage.py runserver 0.0.0.0:8000
165.22.113.159:8000

# Cancel the server and add:

gunicorn --bind 0.0.0.0:8000 configs.wsgi


deactivate

sudo nano /etc/systemd/system/gunicorn.service

[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=dil_admin
Group=www-data
WorkingDirectory=/home/dil_admin/ecommarce/buyme
ExecStart=/home/dil_admin/ecommarce/ecomavenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/dil_admin/buyme.sock configs.wsg$

[Install]
WantedBy=multi-user.target


# Exit and save
With that, our systemd service file is complete. Save and close it now.

We can now start the Gunicorn service we created and enable it so that it starts at boot:

ecomavenv) dil_admin@buyme:~/ecommarce/buyme$ sudo systemctl daemon-reload
(ecomavenv) dil_admin@buyme:~/ecommarce/buyme$ sudo systemctl start gunicorn
												sudo systemctl enable gunicorn
(ecomavenv) dil_admin@buyme:~/ecommarce/buyme$ sudo systemctl status gunicorn
● gunicorn.service - gunicorn daemon
   Loaded: loaded (/etc/systemd/system/gunicorn.service; enabled; vendor preset: enabled)
   Active: active (running) since Mon 2020-07-27 02:21:51 UTC; 4s ago
 Main PID: 8450 (gunicorn)


We can confirm that the operation was successful by checking for the socket file.

Check for the Gunicorn Socket File
Check the status of the process to find out whether it was able to start:

sudo systemctl status gunicorn

# If the systemctl status command indicated that an error occurred or if you do not find the myproject.sock file in the directory, it’s an indication that Gunicorn was not able to start correctly. Check the Gunicorn process logs by typing:

sudo journalctl -u gunicorn

sudo nano /etc/nginx/sites-available/buyme
erver {
    listen 80;
    server_name 165.22.113.159;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/dil_admin/ecommarce;
    }

    location /media/ {
        root /home/dil_admin/ecommarce;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/dil_admin/buyme.sock;
    }
}

Exit and Save

(ecomavenv) dil_admin@buyme:~/ecommarce/buyme$ sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
(ecomavenv) dil_admin@buyme:~/ecommarce/buyme$ sudo systemctl restart nginx
sudo ln -s /etc/nginx/sites-available/buyme /etc/nginx/sites-enabled


sudo ufw delete allow 8000
Rule deleted
Rule deleted (v6)
(ecomavenv) dil_admin@buyme:~/ecommarce/buyme$ sudo ufw allow 'Nginx Full'
Rule added
Rule added (v6)
